# TYPE DEFINITIONS (schema)

# SCALAR TYPES for GraphQL
# String, Boolean, Int, Float, ID
# These are used to define the types of each value within your type defs.

# "!" below, after the scalar types, means a non-nullable type (optional). For a return type you have specified within a Query or Mutation method 
# it must have the key and a specified types - either scalar or custom defined (see below).

# Ex: 
#  users(query: String!): [User!]! <-- return type is an array of Users (custom defined type) and is non-nullable(!).
#  users: String! <-- return type is a single scalar type of String and is non-nullable(!) 

# Ex:
# type User {
#  id: ID! <-- type of id
#  name: String! <-- type of name
#  email: String! <-- type of email
#  age: ID <-- type of age, and so forth
#  posts: [Post!]! <-- type is an array of Posts that is non-nullable
#  comments: [Comment!]!
# }

# QUERIES: 
# A Query method emulates 'get' requests and have optional query parameters that are passed to resolver methods to execute desired functionality.
# These 'get' request methods can also have optional nullable or non-nullable parameter types. 

# Ex: users(query: String!): [User!]! or users: [User!]! 

# The return type is specied after the ':' above. Since this is a non-nullable return type distinguished by the "!", 
# the methods you DEFINE must return one of the types defined below (User, Post, Comment).

# MUTATIONS: 
# A Mutation method emulates 'put', 'post', and 'delete' requests. They are similar to Query methods, but they require paramters (not optional).

# NOTE: Mutations can have a defined input type, since there can be multiple inputs for an actual mutation request, which can get unweildly. 
# I've defined the `input` type for each mutation method parameter. (CreateUserInput, UpdateUserInput, CreatePostInput)
# Within the method parameter assign a key with a name of your choosing, and assign the value to an `input` type you defined.
# You will have to access the name of the key to reference the `input` type you assigned to the key. 

# Be sure the names are the same when accessing them (see below).

# Ex:
#   If `createUser(data: CreateUserInput): User!` then `args.data` within the method itself.
#     the parameter `data` must be of CreateUserInput type, defined below. (data object passed into actual query requries a name, email, and age).
#   If `createPost(whatever: CreatePostInput): User!`, then `args.whatever` within the method itself.
#     the parameter `whatever` must be of CreatePostInput type defined below (data object passed into actual query requries a title, body, published, and author).

# SEE TYPE DEFINITIONS BELOW!!!

type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments(query: String): [Comment!]!
}

type Mutation { 
  createUser(data: CreateUserInput): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  createPost(data: CreatePostInput): Post!
  deletePost(id: ID!): Post!
  createComment(data: CreateCommentInput): Comment!
  deleteComment(id: ID!): Comment!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input CreatePostInput {
  title: String! 
  body: String!
  published: Boolean!
  author: ID!
}


input CreateCommentInput {
  text: String!
  post: ID!
  author: ID!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: ID
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}
