# TYPE DEFINITIONS (schema)

# SCALAR TYPES for GraphQL
# String, Boolean, Int, Float, ID

# These are used to define the types of each value within your data structures.
# "!" means a non-nullable type (this can be optional). For a return type you have specified within a Query or Mutation method it must have the key and their specified types!!!
# Ex:
# type User {
#  id: ID! <-- type of id
#  name: String! <-- type of name
#  email: String! <-- type of email
#  age: ID <-- type of age, and so forth
#  posts: [Post!]!
#  comments: [Comment!]!
# }

# QUERIES (Query) emulate 'get' requests and have optional query parameters that are passed to resolver methods (see below in Resolvers) to execute desired functionality.
# These 'get' requests are methods that can take on a parameter or not Ex: users(query: String!): [User!]! or query: [User!]! (see below for reference)
# The return type is specied after the ':' This is a non-nullable return type meaning the methods you DEFINE must return a type
# defined below - User, Post, Comment.

# MUTATIONS (Mutation) emulate 'put', 'post', 'delete' requests. They are similar to Queries, but they need paramters passed in (not optional).

# NOTE: Mutations can have an input type as well, since there can be multiple inputs for mutation. I've defined the input type
# with a 'data' object for each mutation. You will have to access the data object via args.data within each mutation method
# but you can name it anything within the parameters field of the actual mutation. 
# Be sure the names are the same when accessing them!!! If `createUser(data: CreateUserInput): User!` then `args.data`,
# if createUser(whatever: CreateUserInput): User!, then args.whatever 
# see below for additional examples.

type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments(query: String): [Comment!]!
}

type Mutation { 
  createUser(data: CreateUserInput): User!
  deleteUser(id: ID!): User!
  createPost(data: CreatePostInput): Post!
  deletePost(id: ID!): Post!
  createComment(data: CreateCommentInput): Comment!
  deleteComment(id: ID!): Comment!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input CreatePostInput {
  title: String! 
  body: String!
  published: Boolean!
  author: ID!
}

input CreateCommentInput {
  text: String!
  post: ID!
  author: ID!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: ID
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}
